package com.wt.test.gradle.plugin.springboot

plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.6.1' apply false
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

qiyuSpringBoot{
    sourceCompatibility = 11
    archiveClassifier = ''
}

ext = project.extensions.findByName("qiyuSpringBoot")

dependencyManagement {
    dependencies {
//        dependencySet(group: 'org.springframework.boot', version: '2.6.1') {
//            entry 'spring-boot-starter'
//            entry 'spring-boot-starter-test'
//            entry 'spring-boot-starter-web'
//        }
        dependency group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
        dependency group: 'org.projectlombok', name: 'lombok', version: '1.18.22'
        dependency 'org.hibernate.validator:hibernate-validator:7.0.1.Final'
    }
    imports {
        mavenBom 'org.springframework.boot:spring-boot-dependencies:2.6.1'
    }
}


subprojects {
    group rootProject.group
    version rootProject.version
    sourceCompatibility = rootProject.ext.sourceCompatibility

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven { name "Alibaba"; url "https://maven.aliyun.com/repository/public" }
        mavenCentral()
    }

    buildscript {
        repositories {
            mavenLocal()
            maven { name "Alibaba"; url 'https://maven.aliyun.com/repository/public' }
            mavenCentral()
        }
    }

    jar {
        archiveClassifier = rootProject.ext.archiveClassifier
    }

    bootJar {
        enabled = false
    }
}

//https://docs.gradle.org/7.3/userguide/publishing_maven.html#publishing_maven:resolved_dependencies
//In the example above, Gradle will use the versions resolved on the runtimeClasspath for dependencies declared in api,
//which are mapped to the compile scope of Maven. Gradle will also use the versions resolved on the runtimeClasspath for dependencies declared in implementation,
//which are mapped to the runtime scope of Maven. fromResolutionResult() indicates that Gradle should use the default classpath of a variant and runtimeClasspath is the default classpath of java-runtime.

allprojects {
    publishing {
        publications {
            mavenLocal(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
    }
}


